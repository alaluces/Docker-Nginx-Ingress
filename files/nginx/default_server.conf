upstream main {
	server 16.72.7.177:8081;
	keepalive 32;
}

upstream backoffice {
        server 16.72.7.177:8082;
        keepalive 32;
}

server {
    listen 80 default_server;
    listen [::]:80;
    listen 443  ssl http2;
    listen [::]:443  ssl http2;

    ssl_certificate          /etc/ssl/certs/custom/cert.crt;
    ssl_certificate_key      /etc/ssl/certs/custom/privkey.key;
    ssl_trusted_certificate  /etc/ssl/certs/custom/ca.crt;
    ssl_stapling             on;
    ssl_stapling_verify      on;
    
    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    location ~ /\.ht {
        deny  all;
    }

    location / {
	#if ($scheme = https) {
        #    more_set_headers    "Strict-Transport-Security: max-age=15724800; includeSubDomains";
	#}
	port_in_redirect off;

	# enforce ssl on server side
	if ($redirect_to_https) {
		return 301 https://$best_http_host$request_uri;
	}

	client_max_body_size                    "1m";
	# Allow websocket connections
	proxy_set_header                        Upgrade           $http_upgrade;
	proxy_set_header                        Connection        $connection_upgrade;
	proxy_set_header X-Request-ID           $req_id;
	proxy_set_header X-Real-IP              $the_real_ip;
	proxy_set_header X-Forwarded-For        $the_real_ip;
	proxy_set_header X-Forwarded-Host       $best_http_host;
	proxy_set_header X-Forwarded-Port       $pass_port;
	proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
	proxy_set_header X-Original-URI         $request_uri;
	proxy_set_header X-Scheme               $pass_access_scheme;

	# Pass the original X-Forwarded-For
	proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
	# mitigate HTTPoxy Vulnerability
	# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
	proxy_set_header Proxy                  "";

	# Custom headers to proxied server
	proxy_connect_timeout                   5s;
	proxy_send_timeout                      60s;
	proxy_read_timeout                      60s;
	proxy_buffering                         "off";
	proxy_buffer_size                       "4k";
	proxy_buffers                           4 "4k";
       	proxy_request_buffering                 "on";	
	proxy_http_version                      1.1;
	proxy_cookie_domain                     off;
	proxy_cookie_path                       off;
	 
	# In case of errors try the next upstream server before returning an error
	proxy_next_upstream                     error timeout;
	proxy_next_upstream_tries               3;

	proxy_pass http://main;
	proxy_redirect                          off;
    }

    location ~* ^/backoffice\/?(?<baseuri>.*) {
	#if ($scheme = https) {
        #    more_set_headers    "Strict-Transport-Security: max-age=15724800; includeSubDomains";
	#}
	port_in_redirect off;

	# enforce ssl on server side
	if ($redirect_to_https) {
		return 301 https://$best_http_host$request_uri;
	}

	client_max_body_size                    "1m";
	# Allow websocket connections
	proxy_set_header                        Upgrade           $http_upgrade;
	proxy_set_header                        Connection        $connection_upgrade;
	proxy_set_header X-Request-ID           $req_id;
	proxy_set_header X-Real-IP              $the_real_ip;
	proxy_set_header X-Forwarded-For        $the_real_ip;
	proxy_set_header X-Forwarded-Host       $best_http_host;
	proxy_set_header X-Forwarded-Port       $pass_port;
	proxy_set_header X-Forwarded-Proto      $pass_access_scheme;
	proxy_set_header X-Original-URI         $request_uri;
	proxy_set_header X-Scheme               $pass_access_scheme;

	# Pass the original X-Forwarded-For
	proxy_set_header X-Original-Forwarded-For $http_x_forwarded_for;
	# mitigate HTTPoxy Vulnerability
	# https://www.nginx.com/blog/mitigating-the-httpoxy-vulnerability-with-nginx/
	proxy_set_header Proxy                  "";

	# Custom headers to proxied server
	proxy_connect_timeout                   5s;
	proxy_send_timeout                      60s;
	proxy_read_timeout                      60s;
	proxy_buffering                         "off";
	proxy_buffer_size                       "4k";
	proxy_buffers                           4 "4k";
       	proxy_request_buffering                 "on";	
	proxy_http_version                      1.1;
	proxy_cookie_domain                     off;
	proxy_cookie_path                       off;
	 
	# In case of errors try the next upstream server before returning an error
	proxy_next_upstream                     error timeout;
	proxy_next_upstream_tries               3;

	rewrite (?i)/backoffice/(.*) /$1 break;
	rewrite (?i)/backoffice$ / break;
	proxy_pass http://backoffice;
	proxy_redirect                          off;
    }
}
